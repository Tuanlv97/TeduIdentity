1: Lấy thông tin permission theo roleId
USE [TeduIdentity]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS ( SELECT *
FROM sysobjects 
WHERE id = object_id(N'[Get_Permission_By_RoleId]')
	and OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [Get_Permission_By_RoleId]
END

GO
CREATE PROCEDURE [Get_Permission_By_RoleId]
	@roleId varchar(50) null
AS
BEGIN
	-- SET NOCOUNT ON added to preven extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON
	SELECT *
	FROM [Identity].Permissions WHERE RoleId = @roleId
END

2: Tạo Permissions

USE [TeduIdentity]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS (SELECT * 
FROM sysobjects
WHERE id = object_id(N'[Create_Permission]')
	and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [Create_Permission]
END

GO

CREATE PROCEDURE [Create_Permission]
	@roleId VARCHAR(50) NULL,
	@function VARCHAR(50) NULL,
	@command VARCHAR(50) NULL,
	@newID bigint OUTPUT
AS
BEGIN
	
	SET XACT_ABORT ON;
	BEGIN TRAN
	BEGIN TRY

	IF NOT EXISTS ( SELECT * 
	FROM [Identity].Permissions
	WHERE [RoleId] = @roleId AND
		[Function] = @function AND
		[Command] = @command)
	BEGIN
		INSERT INTO [Identity].Permissions
			([RoleId],[Function], [Command])
		VALUES
			(@roleId,@function,@command)
		SET @newID = SCOPE_IDENTITY();
	END

	COMMIT
	END TRY
	BEGIN CATCH
		ROLLBACK
			DECLARE @ErrorMessage VARCHAR(2000)
			SELECT @ErrorMessage = 'ERROR: ' + ERROR_MESSAGE()
			RAISERROR(@ErrorMessage, 16, 1)
	END CATCH
END
3: Xoá Permission
IF EXISTS (SELECT *
			FROM sysobjects
			WHERE id = object_id(N'[dbo].[Delete_Permission]')
				  and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[Delete_Permission]
END

GO

CREATE PROCEDURE [dbo].[Delete_Permission]
	@roleId varchar(50),
	@function varchar(50),
	@command varchar(50)
AS
BEGIN
	DELETE
	FROM [Identity].Permissions
	WHERE [RoleId] = @roleId
	AND [Function] = @function
	AND [Command] = @command
END
GO

4: Update permission

IF EXISTS (SELECT *
			FROM sysobjects
			WHERE id = object_id(N'[dbo].[Update_Permissions_ByRole]')
				  and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[Update_Permissions_ByRole]
END

DROP TYPE IF EXISTS [dbo].[Permission]

CREATE TYPE [dbo].[Permission] AS TABLE (
	[RoleId] varchar(50) NOT NULL,
	[Function] varchar(50) NOT NULL,
	[Command] varchar(50) NOT NULL
	)
GO

CREATE PROCEDURE [Update_Permissions_ByRole]
		@roleId VARCHAR(50) NULL,
		@permissions Permission readonly

AS
BEGIN
	SET XACT_ABORT on;
	BEGIN TRAN
	BEGIN TRY
	DELETE FROM [Identity].Permissions where RoleId = @roleId;
	INSERT INTO [Identity].Permissions
		(RoleId, [Function], Command)
	SELECT [RoleId], [Function], Command
	FROM @permissions

	COMMIT
	END TRY
	BEGIN CATCH
		ROLLBACK
			DECLARE @ErrorMessage VARCHAR(2000)
			SELECT @ErrorMessage = 'ERROR' + ERROR_MESSAGE()
			RAISERROR(@ErrorMessage, 16, 1)
		END CATCH
END
GO

5: Hàm phân trang role (hàm tham khảo thêm)
IF EXISTS (SELECT *
			FROM sysobjects
			WHERE id = object_id(N'[dbo].[Get_Role_AllPaging]')
				  and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	DROP PROCEDURE [dbo].[Get_Role_AllPaging]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================
-- Author Anh Tuan
-- Crete date: 02/01/2023
-- Description: select all role records with paging
-- ========================================

CREATE PROCEDURE [dbo].[Get_Role_AllPaging]
@tenantId int,
@keyword nvarchar(50),
@pageIndex int,
@pageSize int,
@totalRow int output

AS
BEGIN
	SET NOCOUNT ON;

	SELECT @totalRow = count(*) from AppRoles r
	WHERE (@keyword IS NULL OR r.Name like @keyword + '%')

	SELECT * FROM AppRoles r
	 WHERE (@keyword IS NULL OR r.NAME like @keyword + '%')

	 SELECT * FROM AppRoles r
	 WHERE (@keyword IS NULL OR r.Name like @keyword + '%')
	 AND TenantId = @tenantId
	 ORDER BY r.Name
	 offset (@pageIndex - 1) * @pageSize ROWS
	 FETCH NEXT @pageSize ROW only

END
GO



